[
  {
    "objectID": "links.html",
    "href": "links.html",
    "title": "Links",
    "section": "",
    "text": "There are a lot of resources for learning R, RStudio, Quarto and Git/GitHub, here are some I find really useful"
  },
  {
    "objectID": "links.html#quartormarkdown",
    "href": "links.html#quartormarkdown",
    "title": "Links",
    "section": "Quarto/RMarkdown",
    "text": "Quarto/RMarkdown\n\nQuarto amazingly good documentation.\nIntroduction to R Markdown - RStudio\nLearn R Markdown • rmarkdown - RStudio"
  },
  {
    "objectID": "links.html#gitgithub",
    "href": "links.html#gitgithub",
    "title": "Links",
    "section": "Git/GitHub",
    "text": "Git/GitHub\n\nHappy Git and GitHub for the useR"
  },
  {
    "objectID": "links.html#books",
    "href": "links.html#books",
    "title": "Links",
    "section": "Books",
    "text": "Books\n\nR for Data Science (2e)\nR Markdown: The Definitive Guide"
  },
  {
    "objectID": "links.html#community",
    "href": "links.html#community",
    "title": "Links",
    "section": "Community",
    "text": "Community\n\nR4DS Online Learning Community"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "R and RStudio are two separate programmes that need installing."
  },
  {
    "objectID": "installation.html#git",
    "href": "installation.html#git",
    "title": "Installation",
    "section": "Git",
    "text": "Git\nIn the long term it would be worth getting familiar with Git and GitHub and there is an excellent site that guides you through doing that Happy Git and GitHub for the useR, this site won’t attempt to duplicate the content so please work through the site to get yourself setup with Git and GitHub."
  },
  {
    "objectID": "installation.html#r",
    "href": "installation.html#r",
    "title": "Installation",
    "section": "R",
    "text": "R\nDownload and install R for your operating system."
  },
  {
    "objectID": "installation.html#rstudio",
    "href": "installation.html#rstudio",
    "title": "Installation",
    "section": "RStudio",
    "text": "RStudio\nRStudio is an Integrated Development Environment (IDE) produced by the company Posit that makes using R a bit smoother. It should be straight-forward to download and install following the instructions on the linked website.\nWhen you start RStudio the window has several different sections as shown below\n\n\n\nRStudio Startup\n\n\nThere are panes within the window and each pane has tabs for different tasks/jobs. Your layout may be slightly different but will have the same areas as the above image, which in the bottom right thereis a “Files” tab showing with other tabs for “Plots”, “Packages”, “Help”, “Viewer” and “Presentation”. On the top left is the “Console” with tabs for “Terminal and”Background jobs”. On the left are tabs for “Environment”, “History” and “Connections”.\n\nStarting an R Project\nProjects are a way of encapsulating a group of files and work in a single managed space.\nStart RStudio and select File &gt; New Project in the window that appears select New Directory &gt; New Project.\n\n\n\nCreate Project from New Directory\n\n\n\n\n\nCreate New Project\n\n\nIn Directory Name enter getting-started-with-r and under Create project as a subdirectory of choose somewhere for the work to be saved to. Tick the boxes Create a git repository and Use renv with this project then click the Create Project button.\n\n\n\nSelecting Directory for a New Project\n\n\nYou’ve just initialised the directory to be an R Project that RStudio recognises."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started with R",
    "section": "",
    "text": "This site is about getting started with the R programming language. It aims to..\n\nHelp you install and setup the software required to start using R.\nIntroduces the RStudio Integrated Development Environment (IDE) for writing R code.\nExplains some basic concepts about R packages and environments.\nIntroduces the Tidyverse.\nShows some basic examples of loading some data, cleaning it and summarising it via plots and tables.\nIntroduces literate programming.\n\nThis is site written in Quarto by slackline. If you find any problems with the content please create an issue."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site was written by slackline to help a friend get started with learning R."
  },
  {
    "objectID": "learning_resources.html",
    "href": "learning_resources.html",
    "title": "Learning Resources",
    "section": "",
    "text": "How do we know what options a function has? Well each package and function has excellent built-in help we can access at the command line. All you need to do is precede the function you want to look at the help for with a ? and the help will be shown.\n\n?table\ntable                   package:base                   R Documentation\n\nCross Tabulation and Table Creation\n\nDescription:\n\n     ‘table’ uses cross-classifying factors to build a contingency\n     table of the counts at each combination of factor levels.\n\nUsage:\n\n     table(...,\n           exclude = if (useNA == \"no\") c(NA, NaN),\n           useNA = c(\"no\", \"ifany\", \"always\"),\n           dnn = list.names(...), deparse.level = 1)\n\n     as.table(x, ...)\n     is.table(x)\n\n     ## S3 method for class 'table'\n     as.data.frame(x, row.names = NULL, ...,\n                   responseName = \"Freq\", stringsAsFactors = TRUE,\n                   sep = \"\", base = list(LETTERS))\n\nArguments:\n\n...\n\nTry looking at the help for dplyr::select()"
  },
  {
    "objectID": "learning_resources.html#help-pages",
    "href": "learning_resources.html#help-pages",
    "title": "Learning Resources",
    "section": "",
    "text": "How do we know what options a function has? Well each package and function has excellent built-in help we can access at the command line. All you need to do is precede the function you want to look at the help for with a ? and the help will be shown.\n\n?table\ntable                   package:base                   R Documentation\n\nCross Tabulation and Table Creation\n\nDescription:\n\n     ‘table’ uses cross-classifying factors to build a contingency\n     table of the counts at each combination of factor levels.\n\nUsage:\n\n     table(...,\n           exclude = if (useNA == \"no\") c(NA, NaN),\n           useNA = c(\"no\", \"ifany\", \"always\"),\n           dnn = list.names(...), deparse.level = 1)\n\n     as.table(x, ...)\n     is.table(x)\n\n     ## S3 method for class 'table'\n     as.data.frame(x, row.names = NULL, ...,\n                   responseName = \"Freq\", stringsAsFactors = TRUE,\n                   sep = \"\", base = list(LETTERS))\n\nArguments:\n\n...\n\nTry looking at the help for dplyr::select()"
  },
  {
    "objectID": "learning_resources.html#package-documentation",
    "href": "learning_resources.html#package-documentation",
    "title": "Learning Resources",
    "section": "Package Documentation",
    "text": "Package Documentation\nMuch of the Tidyverse packages have excellent documentation on their websites.\n\ndplyr\nforcats\nggplot2\npurrr\nreadr\nstringr\n\n\nLiterate Programming\nOne of the best features of R is the RMarkdown ecosystem, the latest iteration of which is the Quarto publishing framework."
  },
  {
    "objectID": "learning_resources.html#books",
    "href": "learning_resources.html#books",
    "title": "Learning Resources",
    "section": "Books",
    "text": "Books\nOne of the best books for learning R is R for Data Science (2e). Its brilliant and shows how to structure workflows, organise files, read data from different sources, join different datasets, handle missing data, make summaries in tables and graphs. There is the R4DS Online Learning Community which has a Slack community with multiple channels where you can ask for questions you have as you work through the book.\nThere are many other books that are freely available though."
  },
  {
    "objectID": "first_steps.html",
    "href": "first_steps.html",
    "title": "First Steps",
    "section": "",
    "text": "Now that you have installed R and RStudio we can move onto starting a project, installing packages and writing some R code."
  },
  {
    "objectID": "first_steps.html#installing-packages",
    "href": "first_steps.html#installing-packages",
    "title": "First Steps",
    "section": "Installing Packages",
    "text": "Installing Packages\nThe core of R is fully functional, you can do a lot with it, but the beauty and power of most languages is that they are extensible and people can write additional packages that add functionality. R is no exception, there are over 20000 packages available on the Comprehensive R Archive Network (CRAN).\nThere is a suite/group of packages collectively called the Tidyverse that follow a consistent design philosophy and grammar that make writing and using R much easier. These are worth using but need installing and are explained well in the R for Data Science (2e) book detailed below.\nYou can easily install them from the Console with.\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"Hmisc\")\n## All in one\n## install.packages(c(\"tidyverse\", \"Hmisc\"))\n\nOnce installed you need to load the packages into R and so in RStudio you would type in the Console\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(Hmisc)\n\n\nAttaching package: 'Hmisc'\n\nThe following objects are masked from 'package:dplyr':\n\n    src, summarize\n\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n\n\nAll the packages and programmes are now available to use, this means you can use the functions directly without specifying the package from which they come, for example filter(), select() or describe(). However for clarity in this document I have stuck with the convention of specifying the package to which a function belongs to make things a little clearer. This is done by preceding the function with the package name and separating with two colons, i.e. dplyr::filter(), dplyr::select() or Hmisc::describe(). One of the advantages of this convention is that you don’t have to load the package with the library() command."
  },
  {
    "objectID": "first_steps.html#writing-r-code",
    "href": "first_steps.html#writing-r-code",
    "title": "First Steps",
    "section": "Writing R Code",
    "text": "Writing R Code\nYou can write R commands directly into the Console of RStudio and execute them, this is easy and convenient and R will keep a history of the commands you type that you can go back and forth through using the up and down arrows (it writes them to the ‘.Rhistory’ file in the project directory root). However, long term you want to have a more structured record of the code you write which is reproducible so its better to write your commands in a file and execute them from there.\nOne of the panels in RStudio has a tab labelled Files and from here you can create new folders and files. Using the New Folder button create a director called r, double-click on it to enter that directory and then use the New Blank File and select R Script to create a file called my_first_script.R. This opens up the file and you can start typing in it."
  },
  {
    "objectID": "first_steps.html#reading-data.",
    "href": "first_steps.html#reading-data.",
    "title": "First Steps",
    "section": "Reading data.",
    "text": "Reading data.\nThe file example.csv includes some dummy data I made up to demonstrate how to de-deuplicate data. Right-click and save this file to getting-started-with-r/data/csv where you are going to try things out (you will need to create the nested data/csv directory within wherever you created getting-started-with-r in the previous step).\nReading the CSV into memory is done with the read_csv() command, and you assign the data to a named object, in this case df (short for data frame but it could be dog or cat it doesn’t matter) using the &lt;- assignment operator.\n\ndf &lt;- read_csv(\"data/csv/example.csv\")\n\nRows: 7 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): name, gender, species\ndbl (1): age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThis tells us that the data has been read and there are five rows in the data and four columns. The names of the columns are listed with their types\nNB If you didn’t first run library(tidyverse) you will see an error message saying could not find function read_csv because the read_csv() function is part of the tidyverse library.\nThis loads the data into an “object” called df and we can look at the data by simply typing its name…\n\ndf\n\n# A tibble: 7 × 4\n  name        age gender species   \n  &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n1 merlin        4 male   dog       \n2 carrot       14 female cat       \n3 coco          3 female cat       \n4 daisy         6 female guinea pig\n5 buttercup     6 female guinea pig\n6 merlin        6 male   dog       \n7 fluff        NA male   cat       \n\n\nThis is a small dataset so we’re able to look at it and make sense of it but often datasets are a lot larger and “looking” at data isn’t that useful. What is more useful is to describe, summarise and visualise the data.\nIf we want to look at just one column there are a couple of ways of doing so, we can use the $ operator on the data frame to select the column…\n\ndf$name\n\n[1] \"merlin\"    \"carrot\"    \"coco\"      \"daisy\"     \"buttercup\" \"merlin\"   \n[7] \"fluff\"    \n\n\nThere are however different ways of selecting and filtering data which are perhaps a little more intuitive and certainly more flexible."
  },
  {
    "objectID": "first_steps.html#filtering-and-selecting-data",
    "href": "first_steps.html#filtering-and-selecting-data",
    "title": "First Steps",
    "section": "Filtering and Selecting Data",
    "text": "Filtering and Selecting Data\nBeing able to filter and select data is really useful, it narrows down the variables that are included and can make using other functions considerably easier. dplyr has two verbs for doing this, we have already seen the select() variable that allows us to choose columns, the other verb is filter() which allows us to select rows.\n\ndplyr::select()\nWe can use dplyr::select() to select columns that we want to keep/see. Here we use the built-in pipe operator |&gt; which passes what is on the left (df) into what is on the right (the function dplyr::select()). There are other pipe operators available from the magrittr package.\n\ndf |&gt; dplyr::select(name)\n\n# A tibble: 7 × 1\n  name     \n  &lt;chr&gt;    \n1 merlin   \n2 carrot   \n3 coco     \n4 daisy    \n5 buttercup\n6 merlin   \n7 fluff    \n\n\n\n\ndplyr::filter()\nThe dplyr::filter() command allows you to select rows that you wish to subset data by. For example if we wanted to select all cats from our example data we would filter based on the species column.\n\ndf |&gt;\n    dplyr::filter(species == \"cat\")\n\n# A tibble: 3 × 4\n  name     age gender species\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 carrot    14 female cat    \n2 coco       3 female cat    \n3 fluff     NA male   cat    \n\n\nWe can combine dplyr::filter() and dplyr::select() to filter on rows and columns. You may want to filter your data first as some of the columns you are filtering on you may not want to retain. In this example we filter on species but then only select the name and age columns.\n\ndf |&gt;\n    dplyr::filter(species == \"cat\") |&gt;\n    dplyr::select(name, age)\n\n# A tibble: 3 × 2\n  name     age\n  &lt;chr&gt;  &lt;dbl&gt;\n1 carrot    14\n2 coco       3\n3 fluff     NA\n\n\nOr"
  },
  {
    "objectID": "first_steps.html#describing-data",
    "href": "first_steps.html#describing-data",
    "title": "First Steps",
    "section": "Describing Data",
    "text": "Describing Data\nDescribing data in programming often involves simply saying what the data is. Data tables in R can be thought of as analogous to worksheets within a spreadsheet and so there are columns which define variables and rows which define observations/entries. Each column has a unique data “type” and R does its best to guess what this should be and apply it.\nUsefully, the read_csv() function gives us a description of the data we have loaded for free when reading the files, but you may have derived datasets or just want to check the types of data in your data frame after making changes. We can do this using the describe() functional\n\ndf |&gt; Hmisc::describe()\n\ndf \n\n 4  Variables      7  Observations\n--------------------------------------------------------------------------------\nname \n       n  missing distinct \n       7        0        6 \n                                                                      \nValue      buttercup    carrot      coco     daisy     fluff    merlin\nFrequency          1         1         1         1         1         2\nProportion     0.143     0.143     0.143     0.143     0.143     0.286\n--------------------------------------------------------------------------------\nage \n       n  missing distinct     Info     Mean      Gmd \n       6        1        4    0.886      6.5    4.067 \n                                  \nValue          3     4     6    14\nFrequency      1     1     3     1\nProportion 0.167 0.167 0.500 0.167\n\nFor the frequency table, variable is rounded to the nearest 0\n--------------------------------------------------------------------------------\ngender \n       n  missing distinct \n       7        0        2 \n                        \nValue      female   male\nFrequency       4      3\nProportion  0.571  0.429\n--------------------------------------------------------------------------------\nspecies \n       n  missing distinct \n       7        0        3 \n                                           \nValue             cat        dog guinea pig\nFrequency           3          2          2\nProportion      0.429      0.286      0.286\n--------------------------------------------------------------------------------\n\n\nThis gives us a nice simple summary of the data with the number of missing and distinct values for all variables, frequency and proportions for categorical string variables (name, gender, species) and for the numerical variable age some simple summary statistics.\nWe can also make simple tables of data by selecting columns and then pipping them into the table()\n\ndf |&gt; dplyr::select(name) |&gt; table()\n\nname\nbuttercup    carrot      coco     daisy     fluff    merlin \n        1         1         1         1         1         2 \n\n\nBy default the table() command doesn’t show any values that are missing which R represents internally as NA, you have to explicitly display these using the useNA option.\n\ndf |&gt; dplyr::select(name) |&gt; table(useNA = \"ifany\")\n\nname\nbuttercup    carrot      coco     daisy     fluff    merlin \n        1         1         1         1         1         2 \n\n\nIt makes no difference here because there aren’t any missing names, but if we apply it to age it does make a difference since fluff is missing his age.\n\ndf |&gt; dplyr::select(age) |&gt; table(useNA = \"ifany\")\n\nage\n   3    4    6   14 &lt;NA&gt; \n   1    1    3    1    1"
  },
  {
    "objectID": "first_steps.html#summarising-data",
    "href": "first_steps.html#summarising-data",
    "title": "First Steps",
    "section": "Summarising Data",
    "text": "Summarising Data\nWe can easily summarise data using the dplyr::summarise() (or summarize()) function from dplyr.\n\ndf |&gt; dplyr::summarise(mean = mean(age),\n                       sd = sd(age),\n                       n = n())\n\n# A tibble: 1 × 3\n   mean    sd     n\n  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1    NA    NA     7"
  },
  {
    "objectID": "first_steps.html#grouping-data",
    "href": "first_steps.html#grouping-data",
    "title": "First Steps",
    "section": "Grouping Data",
    "text": "Grouping Data\nOften you want to perform summaries on groups of data. dplyr makes this straight-forward as it has the verb groupby() which groups the data and subsequent commands are performed on each group. Here we group by species and"
  }
]